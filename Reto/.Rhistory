load("D:/DataScience/ULG/VU1-Reporting/2021-01-30/Fatalities/fatalities.rda")
rm(list = objects())
rm(list = objects())
data("airquality")
data <- na.omit(airquality)
View(data)
data[,-1]
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
lm(Ozone~Temp, data = data)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/glm.R', echo=TRUE)
data <- readRDS("traffic_data_mittenwald_motorcycles.rds")
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
data <- readRDS("traffic_data_mittenwald_motorcycles.rds")
View(data)
str(data)
motor <- ts(data[-1], start = c(2010,1,1), frequency = 365)
plot(motor)
View(motor)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
### Raum 4 ####
data <- readRDS("traffic_data_mittenwald_motorcycles.rds")
str(data)
motor <- ts(data[-1], start = c(2010,1,1), frequency = 365)
plot(motor)
?ts()
motor <- ts(data[-1], start = c(2010,1,1), frequency = 8)
plot(motor)
motor <- ts(data[-1], start = c(2010,1,1), frequency = 365)
plot(motor)
plot(data$MOT~data$wind100m)
corr <- cor(data)
round(corr, 2)
str(data)
corr <- cor(data[-1])
round(corr, 2)
data$mon <- as.factor(data$mon)
data$wday <- as.factor(data$wday)
data$yday <- as.factor(data$yday)
str(data)
lm(MOT~.,data = data)
lin <- lm(MOT~.,data = data)
summary(lin)
plot(lin, type = "l")
plot(data, type = "l")
abline(lin, col = "red")
plot(data$MOT~., type = "l")
data$year <- year(data$date)
data$year <- format(data$date, format = "%Y")
lin <- lm(MOT~mon+wind100m+ssrd+tp+tcc+t2m+wday,data = data)
summary(lin)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
### Raum 4 ####
data <- readRDS("traffic_data_mittenwald_motorcycles.rds")
str(data)
corr <- cor(data[-1])
round(corr, 2)
data$mon <- as.factor(data$mon)
data$wday <- as.factor(data$wday)
data$yday <- as.factor(data$yday)
data$year <- as.factor(format(data$date, format = "%Y"))
lin <- lm(MOT~mon+wind100m+ssrd+tp+tcc+t2m+wday,data = data)
summary(lin)
plot(data$MOT~., type = "l")
abline(lin, col = "red")
plot(lin)
lin2 <- lm(MOT~mon+ssrd+t2m+wday+year,data = data)
summary(lin2)
plot(lin2)
predict(lin)
preds <- predict(lin)
summary(preds)
## Besser --> GLM count-data
gmod <- glm(MOT~mon+ssrd+t2m+wday+year,data = data, family = "Poisson")
## Besser --> GLM count-data
gmod <- glm(MOT~mon+ssrd+t2m+wday+year,data = data, family = "poisson")
summary(gmod)
pred_glm <- predict(gmod)
summary(pred_glm)
## Besser --> GLM count-data
gmod <- glm(MOT~mon+wind100m+ssrd+tp+tcc+t2m+wday+year,data = data, family = "poisson")
summary(gmod)
pred_glm <- predict(gmod)
summary(pred_glm)
plot(gmod)
##### Resolutioin ##########
data <- readRDS("traffic_data_mittenwald_motorcycles.rds")
str(data)
## --> because response var MOT is a positive integer --> we need poisson model for count data!
hist(data$MOT)
# feature engineering
# When do we need to do speed controls?
# Mayor wants to keep no of bikes low (closing roads)
# Learn when roads are busy (restaurants, festivals)
data <- transform(data, year = factor(format(date, "%Y")))
data <- transform(data, ydaysin = sin(yday/365*2*pi), ydaycos = cos(yday/365*2*pi))
plot(data$ydaysin, type = "l")
# Estimate Model
m1 <- glm(MOT~ydaysin+ydaycos+t2m+tcc*tp+ssrd+as.factor(mon)+as.factor(wday), data = data, family = "poisson")
summary(m1)
## Interpretation
# Good Selection of covariates --> all have very low p-value
# NULL Hypothesis = no correlation with features --> reject NULL Hypothesis! Impact is significant
#
coef(m1)
## Interpretation
# Good Selection of covariates --> all have very low p-value
# NULL Hypothesis = no correlation with features --> reject NULL Hypothesis! Impact is significant
#
coef(m1)["t2m"]
#t2m
#0.03050094
exp(coef(m1)["t2m"])
#1.030971  for each degree the temp. rises we have 3% more bikers on the road
exp(coef(m1)["as.factor(wday)1"])
#1.030971  for each degree the temp. rises we have 3% more bikers on the road
1-exp(coef(m1)["as.factor(wday)1"])
x1 <- glm(MOT~t2m, data = data, family = "poisson")
x2 <- glm(MOT~as.factor(mon), data = data, family = "poisson")
x3 <- glm(MOT~ydaysin+ydaycos, data = data, family = "poisson")
plot(predict(x1), type = "l")
plot(predict(x2), type = "l")
plot(predict(x3), type = "l")
plot(predict(x1, type = "response"), type = "l")
plot(predict(x2, type = "response"), type = "l")
plot(predict(x3, type = "response"), type = "l")
plot(predict(x1, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
plot(predict(x2, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
plot(predict(x3, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
matplot(prediict(x3, type = "term"))
matplot(predict(x3, type = "term"))
## Models compensate each other which is what we want
matplot(predict(x1, type = "term"))
matplot(predict(x2, type = "term"))
matplot(predict(x3, type = "term"))
# figure out the best model
AIC(x1, x3, x3)
BIC(x1, x2, x3)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/20210305/2021-03-05-Reto/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
data <- transform(data, year = factor(format(date, "%Y")))
data <- transform(data, ydaysin = sin(yday/365*2*pi), ydaycos = cos(yday/365*2*pi)) # sin and cos don´t have to be used both
plot(data$ydaysin, type = "l")
# select an appropriate model
# Poisson Model (gives relative changes) vs. Linear Model (gives absolute changes)
# Estimate Model
m1 <- glm(MOT~ydaysin+ydaycos+t2m+tcc*tp+ssrd+as.factor(mon)+as.factor(wday), data = data, family = "poisson")
summary(m1)
## Interpretation
# Good Selection of covariates --> all have very low p-value
# NULL Hypothesis = no correlation with features --> reject NULL Hypothesis! Impact is significant
# Relative Changes:
coef(m1)["t2m"]
#t2m
#0.03050094
exp(coef(m1)["t2m"])
#1.030971  for each degree the temp. rises we have 3% more bikers on the road
1-exp(coef(m1)["as.factor(wday)1"])
# Monday (Day 1) has 58% less bikers than Sunday (Day 0 = Intercept)
## Experiment:
x1 <- glm(MOT~t2m, data = data, family = "poisson")
x2 <- glm(MOT~as.factor(mon), data = data, family = "poisson")
x3 <- glm(MOT~ydaysin+ydaycos, data = data, family = "poisson")
plot(predict(x1, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
plot(predict(x2, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
plot(predict(x3, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
## Models compensate each other which is what we want
matplot(predict(x1, type = "term"))
matplot(predict(x2, type = "term"))
matplot(predict(x3, type = "term"))
# figure out the best model
AIC(x1, x3, x3)
BIC(x1, x2, x3)
##### Resolutioin ##########
## investigate data
data <- readRDS("traffic_data_mittenwald_motorcycles.rds")
str(data)
## --> because response var MOT is a positive integer --> we need poisson model for count data!
hist(data$MOT)
# feature engineering
# When do we need to do speed controls?
# Mayor wants to keep no of bikes low (closing roads)
# Learn when roads are busy (restaurants, festivals)
data <- transform(data, year = factor(format(date, "%Y")))
data <- transform(data, ydaysin = sin(yday/365*2*pi), ydaycos = cos(yday/365*2*pi)) # sin and cos don´t have to be used both
plot(data$ydaysin, type = "l")
# Estimate Model
m1 <- glm(MOT~ydaysin+ydaycos+t2m+tcc*tp+ssrd+as.factor(mon)+as.factor(wday), data = data, family = "poisson")
summary(m1)
## Interpretation
# Good Selection of covariates --> all have very low p-value
# NULL Hypothesis = no correlation with features --> reject NULL Hypothesis! Impact is significant
# Relative Changes:
coef(m1)["t2m"]
#t2m
#0.03050094
exp(coef(m1)["t2m"])
#1.030971  for each degree the temp. rises we have 3% more bikers on the road
1-exp(coef(m1)["as.factor(wday)1"])
## Experiment:
x1 <- glm(MOT~t2m, data = data, family = "poisson")
x2 <- glm(MOT~as.factor(mon), data = data, family = "poisson")
x3 <- glm(MOT~ydaysin+ydaycos, data = data, family = "poisson")
plot(predict(x1, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
plot(predict(x2, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
plot(predict(x3, type = "response"), type = "l")
lines(data$MOT, col = "tomato")
## Models compensate each other which is what we want
matplot(predict(x1, type = "term"))
matplot(predict(x2, type = "term"))
matplot(predict(x3, type = "term"))
# figure out the best model
AIC(x1, x3, x3)
BIC(x1, x2, x3)
##### Temperature ##########
data <- readRDS("GFS_Innsbruck/GFS_Innsbruck_039.rds")
data <- subset(data, select=c(observation, t2m, t850))
head(data)
data <- na.omit(subset(data, select=c(observation, t2m, t850)))
head(data)
## What model to use?
mod <- lm(observation~t2m, data = data)
summary(mod)
#
new <- readRDS("GFS_Innsbruck/GFS_Innsbruck_039.rds")
#
new <- subset(tail(readRDS("GFS_Innsbruck/GFS_Innsbruck_039.rds"),1), select = c(observation, t2m, t850))
coef(mod)
new
# forecast for tomorrow afternoon 15 UTC
## T = 7.9409 - 0.6041*1.049
predict(mod, newdata = new)
plot(observation~→t2m, data = data)
plot(observation~t2m, data = data)
abline(0,1, col = "tomato")
abline(0,1, col = "tomato", lwd = 3)
## Huge bias, model adjusts for that with intercept of 7.9409
modx <- lm(observation~., data = data)
summary(modx)
data <- readRDS("GFS_Innsbruck/GFS_Innsbruck_039.rds")
modx <- lm(observation~., data = data)
summary(modx)
modx <- lm(observation~.-date, data = data)
summary(modx)
data <- subset(data, select = -date)
data <- readRDS("GFS_Innsbruck/GFS_Innsbruck_039.rds")
modx <- lm(observation~.-datetime, data = data)
summary(modx)
predict(modx, newdata = tail(data, 1))
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/glm.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/practical_exercise.R', encoding = 'UTF-8', echo=TRUE)
