data("USArrests")
data <- USArrests[, c("Murder", "Assault")]
View(USArrests)
data <- scale(na.omiti(data))
cl <- kmeans(data, centers = 4, nstart = 25)
plot(cl)
library(factoextra)
install.packages("factoextra")
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
rlang::last_error()
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
library(party)
library("party")
install.packages("party")
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
plot(lmod)
plot(Ozone, date)
plot(airq$Ozone, airq$date)
plot(airq$Ozone, airq$date, lty = "l")
plot(airq$Ozone, airq$date, type = "l")
abline(lmod)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/01_intro.R', echo=TRUE)
#####
data("airquality")
data <- na.omit(airquality)
head(data, n = 3)
## estimate linear model
mod0 <- lm(Ozone~1, data = data)
mod1 <- lm(Ozone~Temp+Wind, data = data)
mod2 <- lm(Ozone~., data = data)
summary(mod1)
data("airquality")
data <- na.omit(subset(airquality, select=c(Ozone, Solar.R, Wind, Temp)))
head(data, n = 2)
y <- data$Ozone
head(y)
# covariate matrix X
X <- as.matrix(cbind("(Intercept)" = 1, subset(data, select = -Ozone)))
head(X, n = 2)
beta <- solve(t(X)%*%X)%*%t(X)%*%y
beta
yhat <- X%*%beta
eps <- y-yhat
sigma2_hat <- sum(eps^2)/(nrow(X) - ncol(X))
simga2_hat
sigma2_hat <- sum(eps^2)/(nrow(X) - ncol(X))
simga2_hat
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/03_Htesting_Anova.R', echo=TRUE)
rem(list = "object")
rm(list = "object")
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/03_Htesting_Anova.R', echo=TRUE)
print(simga2_hat)
y
sigma2_hat <- sum(eps^2)/(nrow(X) - ncol(X))
sigma2_hat
# standard erros of beta_hat
beta_sd <- sqrt(sigma2_hat*diag(solve(t(X)%*%X)))
beta_sd
#t-test
t_value <- beta/beta_sd
residual_df <- nrow(X)-nrow(beta)
p.value <- 2*pt(abs(t_value))
p.value <- 2*pt(abs(t_value), residual_df, lower.tail = FALSE)
View(p.value)
#result
res <- cbinid(beta, beta_sd, t_value, p.value)
#result
res <- cbind(beta, beta_sd, t_value, p.value)
colnames(res) = c("Estimate", "Std. Error", "t value", "Pr(>|t|")
round(res, 4)
mod <- lm(Ozone~., data = data)
round(summary(mod)$coefficients, 4)
## ANOVA
# F = ((RSS0-RSS1)/(df0-df1))/(RSS1/df1)
# estimate null model
Xic <- matrix(1, nrow = nrow(X), ncol = 1, dimnames = list(NULL, "(Intercept)"))
beta_ic <- solve(t(Xic)%*%t(Xic)%*%y)
beta_ic <- solve(t(Xic)%*%Xic)%*%t(Xic)%*%y
eps_ic <- y-Xic%*%beta_ic
# NULL model
df0 <- nrow(Xic)-nrow(beta_ic)
RSS0 <- sum(eps_ic^2)
# by hand OLS Model
df1 <- nrow(X)- nrow(beta)
RSS1 <- sum(eps^2)
# calculate F
F_value <- ((RSS0-RSS1)/(df0-df1))/(RSS1/df1)
c(F = F_value, df0 ? df0, df1 = df1, RSS0 = RSS0, RSS1 = RSS1)
c(F = F_value, df0=df0, df1 = df1, RSS0 = RSS0, RSS1 = RSS1)
p.value <- 2*pf(F_value, df0, df1, lower.tail = FALSE)
p.value
## Proof
c("F" = F_value, "Pr(>F)"=p.value)
mod0 <- lm(Ozone~1, data = data)
anova(mod0, mod)
summary(lm(Ozone~Solar.R+Wind+Temp, data = data))
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
mf <- model.frame(Ozone~., data = data)
head(mf, n = 2)
y <- model.response(mf)
X <- model.matrix(mf, data = data)
c(class(y), class(X))
head(X, n = 2)
# extract model matrix
mod <- lm(Ozone~., data = data)
X <- model.matrix(mod)
head(X, n = 2)
mf <- model.frame(mod)
head(mf, n = 2)
#transformed covariates
f <- Ozone~.+sqrt(Solar.R)+I(Solar.R^2)+log(Solar.R)
modelX <- lm(f, data = data)
head(model.matrix(modelX), n = 3)
# categorical covariates
data$TempFac <- cut(data$Temp, breaks = 3, labels = c("Low", "Mod", "High"))
modelX <- lm(Ozone~., data = data)
mm <- model.matrix(modelX)
head(mm, n = 3)
plot(mm$TempFacMod~mm$Temp)
mm
library(ggplot2)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
# Interpretation
nd1 <- data[1,]; nd1$TempFac <- "Low"
nd2 <- data[1,]; nd2$TempFac <- "Mod"
nd3 <- data[1,]; nd3$TempFac <- "High"
p1 <- predict(modelX, newdata = nd1)
p2 <- predict(modelX, newdata = nd2)
p3 <- predict(modelX, newdata = nd3)
coef(modelX)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
getmm(Ozone~Wind:Temp)
getmm(Ozone~Wind:Temp:Solar.R)
# Continous and factors
getmm(Ozone~Wind*TempFac)
getmm(Ozone~Wind:TempFac)
getmm(Ozone~Wind:TempFac:Solar.R)
getmm(Ozone~Wind*TempFac*Solar.R)
# factor and factor
data$WindFac <- cut(data$Wind, 2, labels = c("Calm","Windy"))
data$SolarFac <- cut(data$Solar.R, 2, labels = c("Cloudy","Sunny"))
getmm(Ozone~WindFac*TempFac*SolarFac, n = 2)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
# crossing
getmm(Ozone~(WindFac+TempFac+SolarFac)^3, n = 3)
# Harmonics
data("airquality"); data <- na.omit(airquality)
head(data, n = 2)
date <- ISOdate(1970, data$Month, data$Day)
data$yday <- as.POSIXlt(date)$yday
data$ydayrad <- data$yday/365*2*pi
modelX <- lm(Ozone~Solar.R+Wind+Temp+sin(ydayrad)+cos(ydayrad),data = data)
head(model.matrix(modelX), n=2)
df <- model.matrix(modelX)
plot(df$yday~df$sin(ydayrad))
View(df)
plot(df[yday]~df[sin(ydayrad)])
plot(df["yday"]~df["sin(ydayrad)"])
plot(x = df["yday"], y = df["sin(ydayrad)"])
class(df)
plot(x = df[,"yday"], y = df[,"sin(ydayrad)"])
df <- data.frame(df)
View(df)
head(df)
head(data)
plot(x = data$yday, y = data$ydayrad)
plot(x = data$yday, y = sin(data$ydayrad))
plot(x = data$yday, y = sin(data$ydayrad), type = "l")
plot(x = data$yday, y = cos(data$ydayrad), type = "l")
# OLS estimate using first harmonic only
mf <- model.frame(Ozone~sin(ydayrad)+cos(ydayrad), data = data)
y <- model.response(mf)
X <- model.matrix(mf, data = data)
beta <- solve(t(X)%*%X)%*%t(X)%*%y
yhat <- X%*%beta
plot(x = data$yday, y = data$Ozone)
plot(x = data$yday, y = data$Ozone, type = "l")
abline(yhat)
lines(x=data$yday, y = yhat, col = "red")
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
mf <- model.frame(Ozone~Solar.R+Temp+Wind, data = data)
start <- c(rep(0, ncol(mf)),1)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
as.vector(beta)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/04_Model_Matrix.R', echo=TRUE)
coef(lm(Ozone~Solar.R+Temp+Wind, data = data))
opt$par[-length(opt$par)]
# evaluate
opt$value
#Proof
logLik(lm(Ozone~Solar.R+Temp+Wind, data = data))
# OLS vs Gaussian MLE
x <- seq(-10, 10, length = 501)
xlab <- expression(paste("y - ", hat(y)))
par(mfrow = c(1, 3))
plot(x, x^2)
plot(x, x^2, type = "l", xlab = xlab, main = "Squared Error")
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/05_Maximum_likelihood.R', echo=TRUE)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/videoseries/05_Maximum_likelihood.R', echo=TRUE)
