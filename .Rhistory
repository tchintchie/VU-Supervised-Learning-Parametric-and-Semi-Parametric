curve(f, -10, 20, lwd = 2, axes = FALSE, n = 500,
xlab = "", ylab = expression(f(theta)))
points(edges[1], f(edges[1]), col = 2, pch = 16, cex = 1.2)
points(edges[2], f(edges[2]), col = 2, pch = 16, cex = 1.2)
lines(c(edges), f(edges), col = 2, lwd = 2)
lines(c(5, 5), c(0, 0.05), col = 4, lwd = 2)
points(c(5, 5), c(0, 0.05), col = 4, pch = 16, cex = 1.2)
axis(1, at = 5, label = expression(theta^(t)))
axis(2)
axis(1, at = c(-10, 0, 20))
box()
## Slice sampling implementation.
## Argument n specifies the number of samples,
## target is the target function we want to sample from,
## start is a vector of initial starting positions,
## ... are passed to find_edges().
sliceMCMC <- function(n, target, start, ...) {
## Vector where we can save the samples.
samples <- rep(NA, n)
## Set initial value.
theta <- start
## Iterate n times.
for(i in 1:n) {
## Draw the height.
u <- runif(1, 0, target(theta))
## Find the edges.
edges <- find_edges(theta, target, height = u, ...)
## Sample new position.
theta <- runif(1, edges[1], edges[2])
## Save.
samples[i] <- theta
}
return(samples)
}
## Test the slice sampling function.
set.seed(123)
x <- sliceMCMC(10000, target = f, start = 0, step = 1)
## Compare with true density.
hist(x, breaks = "Scott", freq = FALSE)
curve(f, min(x), max(x), add = TRUE, col = 2, lwd = 2, n = 500)
View(X)
theta <- list("beta" = rep(0,k), "sigma2" = 1)
#### 7.3.1 Slice Sampling
rm(list = objects())
par(mfrow = c(1,1))
set.seed(123)
n <- 300
x <- runif(n, -2 * pi, 2 * pi)
y <- 1.2 + sin(x) + rnorm(n, sd = 0.3)
plot(x, y)
## Design Matrix X
X <- cbind(1,poly(x, 3))
k <- ncol(X)
theta <- list("beta" = rep(0,k), "sigma2" = 1)
## Now we can define priors, etc.
## Log-prior for sigma^2.
log_prior_sigma2 <- function(theta, a = 0.001, b = 0.001) {
log(igamma(theta$sigma2, a, b))
}
## Log-prior for beta.
log_prior_beta <- function(theta, mu0 = 0, M0 = 10) {
dnorm(theta$beta, mean = mu0, sd = M0, log = TRUE)
}
## Log-likelihood.
log_lik <- function(y, theta) {
eta <- X %*% theta$beta
sum(dnorm(y, mean = eta, sd = sqrt(theta$sigma2), log = TRUE))
}
## Log-posterior.
log_post <- function(y, theta) {
log_lik(y, theta) + log_prior_beta(theta) + log_prior_sigma2(theta)
}
find_edges <- function(x, target, height,
step = 0.5, eps = 0.0001)
{
## Initial left and right edge.
left <- right <- x
## Step size for both, left and right.
step <- rep(step, length.out = 2)
## Search the left side.
repeat {
if((hs <- target(left)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
left <- left + step[1]
step[1] <- 0.95 * step[1]
}
}
left <- left - step[1]
}
## Search the right side.
repeat {
if((hs <- target(right)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
right <- right - step[2]
step[2] <- 0.95 * step[2]
}
}
right <- right + step[2]
}
c(left, right)
}
## Test on complicated mixture distribution.
f <- function(x) {
0.4 * dnorm(x, mean = -1, sd = 1) + 0.6 * dgamma(x, shape = 6, rate = 1)
}
## Find the edges.
edges <- find_edges(5, target = f, height = 0.05)
## Visualize.
par(mar = c(4.1, 4.1, 0.1, 0.1))
curve(f, -10, 20, lwd = 2, axes = FALSE, n = 500,
xlab = "", ylab = expression(f(theta)))
points(edges[1], f(edges[1]), col = 2, pch = 16, cex = 1.2)
points(edges[2], f(edges[2]), col = 2, pch = 16, cex = 1.2)
lines(c(edges), f(edges), col = 2, lwd = 2)
lines(c(5, 5), c(0, 0.05), col = 4, lwd = 2)
points(c(5, 5), c(0, 0.05), col = 4, pch = 16, cex = 1.2)
axis(1, at = 5, label = expression(theta^(t)))
axis(2)
axis(1, at = c(-10, 0, 20))
box()
## Slice sampling implementation.
## Argument n specifies the number of samples,
## target is the target function we want to sample from,
## start is a vector of initial starting positions,
## ... are passed to find_edges().
sliceMCMC <- function(n, target, start, ...) {
## Vector where we can save the samples.
samples <- rep(NA, n)
## Set initial value.
theta <- start
## Iterate n times.
for(i in 1:n) {
## Draw the height.
u <- runif(1, 0, target(theta))
## Find the edges.
edges <- find_edges(theta, target, height = u, ...)
## Sample new position.
theta <- runif(1, edges[1], edges[2])
## Save.
samples[i] <- theta
}
return(samples)
}
## Test the slice sampling function.
set.seed(123)
x <- sliceMCMC(10000, target = f, start = 0, step = 1)
## Compare with true density.
hist(x, breaks = "Scott", freq = FALSE)
curve(f, min(x), max(x), add = TRUE, col = 2, lwd = 2, n = 500)
##########################################################################
#### 7.3.1 Slice Sampling
rm(list = objects())
par(mfrow = c(1,1))
set.seed(123)
n <- 300
x <- runif(n, -2 * pi, 2 * pi)
y <- 1.2 + sin(x) + rnorm(n, sd = 0.3)
plot(x, y)
## Design Matrix X
X <- cbind(1,poly(x, 3))
k <- ncol(X)
theta <- list("beta" = rep(0,k), "sigma2" = 1)
## Now we can define priors, etc.
## Log-prior for sigma^2.
log_prior_sigma2 <- function(theta, a = 0.001, b = 0.001) {
log(igamma(theta$sigma2, a, b))
}
## Log-prior for beta.
log_prior_beta <- function(theta, mu0 = 0, M0 = 10) {
sum(dnorm(theta$beta, mean = mu0, sd = M0, log = TRUE))
}
## Log-likelihood.
log_lik <- function(theta) {
eta <- X %*% theta$beta
sum(dnorm(y, mean = eta, sd = sqrt(theta$sigma2), log = TRUE))
}
## Log-posterior.
log_post <- function(theta) {
log_lik(y, theta) + log_prior_beta(theta) + log_prior_sigma2(theta)
}
## Log-posterior for univariate.
log_post2 <- function(x, j) {
theta[[i]][j] <- x
log_post(theta)
}
find_edges <- function(x, target, height,
step = 0.5, eps = 0.0001, ...)
{
## Initial left and right edge.
left <- right <- x
## Step size for both, left and right.
step <- rep(step, length.out = 2)
## Search the left side.
repeat {
if((hs <- target(left)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
left <- left + step[1]
step[1] <- 0.95 * step[1]
}
}
left <- left - step[1]
}
## Search the right side.
repeat {
if((hs <- target(right)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
right <- right - step[2]
step[2] <- 0.95 * step[2]
}
}
right <- right + step[2]
}
c(left, right)
}
## Test on complicated mixture distribution.
f <- function(x) {
0.4 * dnorm(x, mean = -1, sd = 1) + 0.6 * dgamma(x, shape = 6, rate = 1)
}
## Find the edges.
edges <- find_edges(5, target = f, height = 0.05)
## Visualize.
par(mar = c(4.1, 4.1, 0.1, 0.1))
curve(f, -10, 20, lwd = 2, axes = FALSE, n = 500,
xlab = "", ylab = expression(f(theta)))
points(edges[1], f(edges[1]), col = 2, pch = 16, cex = 1.2)
points(edges[2], f(edges[2]), col = 2, pch = 16, cex = 1.2)
lines(c(edges), f(edges), col = 2, lwd = 2)
lines(c(5, 5), c(0, 0.05), col = 4, lwd = 2)
points(c(5, 5), c(0, 0.05), col = 4, pch = 16, cex = 1.2)
axis(1, at = 5, label = expression(theta^(t)))
axis(2)
axis(1, at = c(-10, 0, 20))
box()
## Slice sampling implementation.
## Argument n specifies the number of samples,
## target is the target function we want to sample from,
## start is a vector of initial starting positions,
## ... are passed to find_edges().
sliceMCMC <- function(n, target, start, ...) {
## Vector where we can save the samples.
samples <- rep(NA, n)
## Set initial value.
theta <- start
## Iterate n times.
for(i in 1:n) {
## Draw the height.
u <- runif(1, 0, target(theta))
## Find the edges.
edges <- find_edges(theta, target, height = u, ...)
## Sample new position.
theta <- runif(1, edges[1], edges[2])
## Save.
samples[i] <- theta
}
return(samples)
}
## Test the slice sampling function.
set.seed(123)
x <- sliceMCMC(10000, target = f, start = 0, step = 1)
## Compare with true density.
hist(x, breaks = "Scott", freq = FALSE)
curve(f, min(x), max(x), add = TRUE, col = 2, lwd = 2, n = 500)
#### 7.3.1 Slice Sampling
rm(list = objects())
par(mfrow = c(1,1))
set.seed(123)
n <- 300
x <- runif(n, -2 * pi, 2 * pi)
y <- 1.2 + sin(x) + rnorm(n, sd = 0.3)
plot(x, y)
## Design Matrix X
X <- cbind(1,poly(x, 3))
k <- ncol(X)
theta <- list("beta" = rep(0,k), "sigma2" = 1)
## Now we can define priors, etc.
## Log-prior for sigma^2.
log_prior_sigma2 <- function(theta, a = 0.001, b = 0.001) {
log(igamma(theta$sigma2, a, b))
}
## Log-prior for beta.
log_prior_beta <- function(theta, mu0 = 0, M0 = 10) {
sum(dnorm(theta$beta, mean = mu0, sd = M0, log = TRUE))
}
## Log-likelihood.
log_lik <- function(theta) {
eta <- X %*% theta$beta
sum(dnorm(y, mean = eta, sd = sqrt(theta$sigma2), log = TRUE))
}
## Log-posterior.
log_post <- function(theta) {
log_lik(y, theta) + log_prior_beta(theta) + log_prior_sigma2(theta)
}
## Log-posterior for univariate.
log_post2 <- function(x, i, j) {
theta[[i]][j] <- x
log_post(theta)
}
find_edges <- function(x, target, height,
step = 0.5, eps = 0.0001, ...)
{
## Initial left and right edge.
left <- right <- x
## Step size for both, left and right.
step <- rep(step, length.out = 2)
## Search the left side.
repeat {
if((hs <- target(left)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
left <- left + step[1]
step[1] <- 0.95 * step[1]
}
}
left <- left - step[1]
}
## Search the right side.
repeat {
if((hs <- target(right)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
right <- right - step[2]
step[2] <- 0.95 * step[2]
}
}
right <- right + step[2]
}
c(left, right)
}
## Test on complicated mixture distribution.
f <- function(x) {
0.4 * dnorm(x, mean = -1, sd = 1) + 0.6 * dgamma(x, shape = 6, rate = 1)
}
## Find the edges.
edges <- find_edges(5, target = f, height = 0.05)
## Visualize.
par(mar = c(4.1, 4.1, 0.1, 0.1))
curve(f, -10, 20, lwd = 2, axes = FALSE, n = 500,
xlab = "", ylab = expression(f(theta)))
points(edges[1], f(edges[1]), col = 2, pch = 16, cex = 1.2)
points(edges[2], f(edges[2]), col = 2, pch = 16, cex = 1.2)
lines(c(edges), f(edges), col = 2, lwd = 2)
lines(c(5, 5), c(0, 0.05), col = 4, lwd = 2)
points(c(5, 5), c(0, 0.05), col = 4, pch = 16, cex = 1.2)
axis(1, at = 5, label = expression(theta^(t)))
axis(2)
axis(1, at = c(-10, 0, 20))
box()
## Slice sampling implementation.
## Argument n specifies the number of samples,
## target is the target function we want to sample from,
## start is a vector of initial starting positions,
## ... are passed to find_edges().
sliceMCMC <- function(n, target, start, ...) {
## Vector where we can save the samples.
samples <- rep(NA, n)
## Set initial value.
theta <- start
## Iterate n times.
for(i in 1:n) {
## Draw the height.
u <- runif(1, 0, target(theta))
## Find the edges.
edges <- find_edges(theta, target, height = u, ...)
## Sample new position.
theta <- runif(1, edges[1], edges[2])
## Save.
samples[i] <- theta
}
return(samples)
}
## Test the slice sampling function.
set.seed(123)
x <- sliceMCMC(10000, target = f, start = 0, step = 1)
## Compare with true density.
hist(x, breaks = "Scott", freq = FALSE)
curve(f, min(x), max(x), add = TRUE, col = 2, lwd = 2, n = 500)
#### 7.3.1 Slice Sampling
rm(list = objects())
par(mfrow = c(1,1))
set.seed(123)
n <- 300
x <- runif(n, -2 * pi, 2 * pi)
y <- 1.2 + sin(x) + rnorm(n, sd = 0.3)
plot(x, y)
## Design Matrix X
X <- cbind(1,poly(x, 3))
k <- ncol(X)
theta <- list("beta" = rep(0,k), "sigma2" = 1)
## Now we can define priors, etc.
## Log-prior for sigma^2.
log_prior_sigma2 <- function(theta, a = 0.001, b = 0.001) {
log(igamma(theta$sigma2, a, b))
}
## Log-prior for beta.
log_prior_beta <- function(theta, mu0 = 0, M0 = 10) {
sum(dnorm(theta$beta, mean = mu0, sd = M0, log = TRUE))
}
## Log-likelihood.
log_lik <- function(theta) {
eta <- X %*% theta$beta
sum(dnorm(y, mean = eta, sd = sqrt(theta$sigma2), log = TRUE))
}
## Log-posterior.
log_post <- function(theta) {
log_lik(y, theta) + log_prior_beta(theta) + log_prior_sigma2(theta)
}
## Log-posterior for univariate.
log_post2 <- function(x, i, j) {
theta[[i]][j] <- x
log_post(theta)
}
find_edges <- function(x, target, height,
step = 0.5, eps = 0.0001, ...)
{
## Initial left and right edge.
left <- right <- x
## Step size for both, left and right.
step <- rep(step, length.out = 2)
## Search the left side.
repeat {
if((hs <- target(left, i , j)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
left <- left + step[1]
step[1] <- 0.95 * step[1]
}
}
left <- left - step[1]
}
## Search the right side.
repeat {
if((hs <- target(right, i, j)) <= height) {
err <- abs((hs - height)/height)
if(err <= eps) {
break
} else {
right <- right - step[2]
step[2] <- 0.95 * step[2]
}
}
right <- right + step[2]
}
c(left, right)
}
## Test on complicated mixture distribution.
f <- function(x) {
0.4 * dnorm(x, mean = -1, sd = 1) + 0.6 * dgamma(x, shape = 6, rate = 1)
}
## Find the edges.
edges <- find_edges(5, target = f, height = 0.05)
## Visualize.
par(mar = c(4.1, 4.1, 0.1, 0.1))
curve(f, -10, 20, lwd = 2, axes = FALSE, n = 500,
xlab = "", ylab = expression(f(theta)))
points(edges[1], f(edges[1]), col = 2, pch = 16, cex = 1.2)
points(edges[2], f(edges[2]), col = 2, pch = 16, cex = 1.2)
lines(c(edges), f(edges), col = 2, lwd = 2)
lines(c(5, 5), c(0, 0.05), col = 4, lwd = 2)
points(c(5, 5), c(0, 0.05), col = 4, pch = 16, cex = 1.2)
axis(1, at = 5, label = expression(theta^(t)))
axis(2)
axis(1, at = c(-10, 0, 20))
box()
## Slice sampling implementation.
## Argument n specifies the number of samples,
## target is the target function we want to sample from,
## start is a vector of initial starting positions,
## ... are passed to find_edges().
sliceMCMC <- function(n, target, start, ...) {
## Vector where we can save the samples.
samples <- rep(NA, n)
## Set initial value.
theta <- start
## Iterate n times.
for(i in 1:n) {
## Draw the height.
u <- runif(1, 0, target(theta))
## Find the edges.
edges <- find_edges(theta, target, height = u, ...)
## Sample new position.
theta <- runif(1, edges[1], edges[2])
## Save.
samples[i] <- theta
}
return(samples)
}
## Test the slice sampling function.
set.seed(123)
x <- sliceMCMC(10000, target = f, start = 0, step = 1)
## Compare with true density.
hist(x, breaks = "Scott", freq = FALSE)
curve(f, min(x), max(x), add = TRUE, col = 2, lwd = 2, n = 500)
source('D:/DataScience/ULG/VU-Supervised-Learning-Parametric-and-Semi-Parametric/Niki/bayesian.R', echo=TRUE)
install.packages("bamlss")
